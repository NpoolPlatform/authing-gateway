// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/authing-gateway/pkg/db/ent/appauth"
	"github.com/google/uuid"
)

// AppAuth is the model entity for the AppAuth schema.
type AppAuth struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// Resource holds the value of the "resource" field.
	Resource string `json:"resource,omitempty"`
	// Method holds the value of the "method" field.
	Method string `json:"method,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppAuth) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case appauth.FieldCreateAt, appauth.FieldUpdateAt, appauth.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case appauth.FieldResource, appauth.FieldMethod:
			values[i] = new(sql.NullString)
		case appauth.FieldID, appauth.FieldAppID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppAuth", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppAuth fields.
func (aa *AppAuth) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appauth.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				aa.ID = *value
			}
		case appauth.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				aa.AppID = *value
			}
		case appauth.FieldResource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource", values[i])
			} else if value.Valid {
				aa.Resource = value.String
			}
		case appauth.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				aa.Method = value.String
			}
		case appauth.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				aa.CreateAt = uint32(value.Int64)
			}
		case appauth.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				aa.UpdateAt = uint32(value.Int64)
			}
		case appauth.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				aa.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AppAuth.
// Note that you need to call AppAuth.Unwrap() before calling this method if this AppAuth
// was returned from a transaction, and the transaction was committed or rolled back.
func (aa *AppAuth) Update() *AppAuthUpdateOne {
	return (&AppAuthClient{config: aa.config}).UpdateOne(aa)
}

// Unwrap unwraps the AppAuth entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aa *AppAuth) Unwrap() *AppAuth {
	tx, ok := aa.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppAuth is not a transactional entity")
	}
	aa.config.driver = tx.drv
	return aa
}

// String implements the fmt.Stringer.
func (aa *AppAuth) String() string {
	var builder strings.Builder
	builder.WriteString("AppAuth(")
	builder.WriteString(fmt.Sprintf("id=%v", aa.ID))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", aa.AppID))
	builder.WriteString(", resource=")
	builder.WriteString(aa.Resource)
	builder.WriteString(", method=")
	builder.WriteString(aa.Method)
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", aa.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", aa.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", aa.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// AppAuths is a parsable slice of AppAuth.
type AppAuths []*AppAuth

func (aa AppAuths) config(cfg config) {
	for _i := range aa {
		aa[_i].config = cfg
	}
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/authing-gateway/pkg/db/ent/authhistory"
	"github.com/NpoolPlatform/authing-gateway/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// AuthHistoryUpdate is the builder for updating AuthHistory entities.
type AuthHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *AuthHistoryMutation
}

// Where appends a list predicates to the AuthHistoryUpdate builder.
func (ahu *AuthHistoryUpdate) Where(ps ...predicate.AuthHistory) *AuthHistoryUpdate {
	ahu.mutation.Where(ps...)
	return ahu
}

// SetAppID sets the "app_id" field.
func (ahu *AuthHistoryUpdate) SetAppID(u uuid.UUID) *AuthHistoryUpdate {
	ahu.mutation.SetAppID(u)
	return ahu
}

// SetUserID sets the "user_id" field.
func (ahu *AuthHistoryUpdate) SetUserID(u uuid.UUID) *AuthHistoryUpdate {
	ahu.mutation.SetUserID(u)
	return ahu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ahu *AuthHistoryUpdate) SetNillableUserID(u *uuid.UUID) *AuthHistoryUpdate {
	if u != nil {
		ahu.SetUserID(*u)
	}
	return ahu
}

// ClearUserID clears the value of the "user_id" field.
func (ahu *AuthHistoryUpdate) ClearUserID() *AuthHistoryUpdate {
	ahu.mutation.ClearUserID()
	return ahu
}

// SetResource sets the "resource" field.
func (ahu *AuthHistoryUpdate) SetResource(s string) *AuthHistoryUpdate {
	ahu.mutation.SetResource(s)
	return ahu
}

// SetMethod sets the "method" field.
func (ahu *AuthHistoryUpdate) SetMethod(s string) *AuthHistoryUpdate {
	ahu.mutation.SetMethod(s)
	return ahu
}

// SetCreateAt sets the "create_at" field.
func (ahu *AuthHistoryUpdate) SetCreateAt(u uint32) *AuthHistoryUpdate {
	ahu.mutation.ResetCreateAt()
	ahu.mutation.SetCreateAt(u)
	return ahu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ahu *AuthHistoryUpdate) SetNillableCreateAt(u *uint32) *AuthHistoryUpdate {
	if u != nil {
		ahu.SetCreateAt(*u)
	}
	return ahu
}

// AddCreateAt adds u to the "create_at" field.
func (ahu *AuthHistoryUpdate) AddCreateAt(u int32) *AuthHistoryUpdate {
	ahu.mutation.AddCreateAt(u)
	return ahu
}

// Mutation returns the AuthHistoryMutation object of the builder.
func (ahu *AuthHistoryUpdate) Mutation() *AuthHistoryMutation {
	return ahu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ahu *AuthHistoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ahu.hooks) == 0 {
		affected, err = ahu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ahu.mutation = mutation
			affected, err = ahu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ahu.hooks) - 1; i >= 0; i-- {
			if ahu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ahu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ahu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ahu *AuthHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ahu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ahu *AuthHistoryUpdate) Exec(ctx context.Context) error {
	_, err := ahu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahu *AuthHistoryUpdate) ExecX(ctx context.Context) {
	if err := ahu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ahu *AuthHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   authhistory.Table,
			Columns: authhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: authhistory.FieldID,
			},
		},
	}
	if ps := ahu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ahu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: authhistory.FieldAppID,
		})
	}
	if value, ok := ahu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: authhistory.FieldUserID,
		})
	}
	if ahu.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: authhistory.FieldUserID,
		})
	}
	if value, ok := ahu.mutation.Resource(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authhistory.FieldResource,
		})
	}
	if value, ok := ahu.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authhistory.FieldMethod,
		})
	}
	if value, ok := ahu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: authhistory.FieldCreateAt,
		})
	}
	if value, ok := ahu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: authhistory.FieldCreateAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ahu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AuthHistoryUpdateOne is the builder for updating a single AuthHistory entity.
type AuthHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthHistoryMutation
}

// SetAppID sets the "app_id" field.
func (ahuo *AuthHistoryUpdateOne) SetAppID(u uuid.UUID) *AuthHistoryUpdateOne {
	ahuo.mutation.SetAppID(u)
	return ahuo
}

// SetUserID sets the "user_id" field.
func (ahuo *AuthHistoryUpdateOne) SetUserID(u uuid.UUID) *AuthHistoryUpdateOne {
	ahuo.mutation.SetUserID(u)
	return ahuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ahuo *AuthHistoryUpdateOne) SetNillableUserID(u *uuid.UUID) *AuthHistoryUpdateOne {
	if u != nil {
		ahuo.SetUserID(*u)
	}
	return ahuo
}

// ClearUserID clears the value of the "user_id" field.
func (ahuo *AuthHistoryUpdateOne) ClearUserID() *AuthHistoryUpdateOne {
	ahuo.mutation.ClearUserID()
	return ahuo
}

// SetResource sets the "resource" field.
func (ahuo *AuthHistoryUpdateOne) SetResource(s string) *AuthHistoryUpdateOne {
	ahuo.mutation.SetResource(s)
	return ahuo
}

// SetMethod sets the "method" field.
func (ahuo *AuthHistoryUpdateOne) SetMethod(s string) *AuthHistoryUpdateOne {
	ahuo.mutation.SetMethod(s)
	return ahuo
}

// SetCreateAt sets the "create_at" field.
func (ahuo *AuthHistoryUpdateOne) SetCreateAt(u uint32) *AuthHistoryUpdateOne {
	ahuo.mutation.ResetCreateAt()
	ahuo.mutation.SetCreateAt(u)
	return ahuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ahuo *AuthHistoryUpdateOne) SetNillableCreateAt(u *uint32) *AuthHistoryUpdateOne {
	if u != nil {
		ahuo.SetCreateAt(*u)
	}
	return ahuo
}

// AddCreateAt adds u to the "create_at" field.
func (ahuo *AuthHistoryUpdateOne) AddCreateAt(u int32) *AuthHistoryUpdateOne {
	ahuo.mutation.AddCreateAt(u)
	return ahuo
}

// Mutation returns the AuthHistoryMutation object of the builder.
func (ahuo *AuthHistoryUpdateOne) Mutation() *AuthHistoryMutation {
	return ahuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ahuo *AuthHistoryUpdateOne) Select(field string, fields ...string) *AuthHistoryUpdateOne {
	ahuo.fields = append([]string{field}, fields...)
	return ahuo
}

// Save executes the query and returns the updated AuthHistory entity.
func (ahuo *AuthHistoryUpdateOne) Save(ctx context.Context) (*AuthHistory, error) {
	var (
		err  error
		node *AuthHistory
	)
	if len(ahuo.hooks) == 0 {
		node, err = ahuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ahuo.mutation = mutation
			node, err = ahuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ahuo.hooks) - 1; i >= 0; i-- {
			if ahuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ahuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ahuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ahuo *AuthHistoryUpdateOne) SaveX(ctx context.Context) *AuthHistory {
	node, err := ahuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ahuo *AuthHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ahuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahuo *AuthHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := ahuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ahuo *AuthHistoryUpdateOne) sqlSave(ctx context.Context) (_node *AuthHistory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   authhistory.Table,
			Columns: authhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: authhistory.FieldID,
			},
		},
	}
	id, ok := ahuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuthHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ahuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authhistory.FieldID)
		for _, f := range fields {
			if !authhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ahuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ahuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: authhistory.FieldAppID,
		})
	}
	if value, ok := ahuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: authhistory.FieldUserID,
		})
	}
	if ahuo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: authhistory.FieldUserID,
		})
	}
	if value, ok := ahuo.mutation.Resource(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authhistory.FieldResource,
		})
	}
	if value, ok := ahuo.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authhistory.FieldMethod,
		})
	}
	if value, ok := ahuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: authhistory.FieldCreateAt,
		})
	}
	if value, ok := ahuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: authhistory.FieldCreateAt,
		})
	}
	_node = &AuthHistory{config: ahuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ahuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/NpoolPlatform/authing-gateway/pkg/db/ent/migrate"
	"github.com/google/uuid"

	"github.com/NpoolPlatform/authing-gateway/pkg/db/ent/appauth"
	"github.com/NpoolPlatform/authing-gateway/pkg/db/ent/approleauth"
	"github.com/NpoolPlatform/authing-gateway/pkg/db/ent/appuserauth"
	"github.com/NpoolPlatform/authing-gateway/pkg/db/ent/authhistory"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AppAuth is the client for interacting with the AppAuth builders.
	AppAuth *AppAuthClient
	// AppRoleAuth is the client for interacting with the AppRoleAuth builders.
	AppRoleAuth *AppRoleAuthClient
	// AppUserAuth is the client for interacting with the AppUserAuth builders.
	AppUserAuth *AppUserAuthClient
	// AuthHistory is the client for interacting with the AuthHistory builders.
	AuthHistory *AuthHistoryClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AppAuth = NewAppAuthClient(c.config)
	c.AppRoleAuth = NewAppRoleAuthClient(c.config)
	c.AppUserAuth = NewAppUserAuthClient(c.config)
	c.AuthHistory = NewAuthHistoryClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		AppAuth:     NewAppAuthClient(cfg),
		AppRoleAuth: NewAppRoleAuthClient(cfg),
		AppUserAuth: NewAppUserAuthClient(cfg),
		AuthHistory: NewAuthHistoryClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		AppAuth:     NewAppAuthClient(cfg),
		AppRoleAuth: NewAppRoleAuthClient(cfg),
		AppUserAuth: NewAppUserAuthClient(cfg),
		AuthHistory: NewAuthHistoryClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AppAuth.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AppAuth.Use(hooks...)
	c.AppRoleAuth.Use(hooks...)
	c.AppUserAuth.Use(hooks...)
	c.AuthHistory.Use(hooks...)
}

// AppAuthClient is a client for the AppAuth schema.
type AppAuthClient struct {
	config
}

// NewAppAuthClient returns a client for the AppAuth from the given config.
func NewAppAuthClient(c config) *AppAuthClient {
	return &AppAuthClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appauth.Hooks(f(g(h())))`.
func (c *AppAuthClient) Use(hooks ...Hook) {
	c.hooks.AppAuth = append(c.hooks.AppAuth, hooks...)
}

// Create returns a create builder for AppAuth.
func (c *AppAuthClient) Create() *AppAuthCreate {
	mutation := newAppAuthMutation(c.config, OpCreate)
	return &AppAuthCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppAuth entities.
func (c *AppAuthClient) CreateBulk(builders ...*AppAuthCreate) *AppAuthCreateBulk {
	return &AppAuthCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppAuth.
func (c *AppAuthClient) Update() *AppAuthUpdate {
	mutation := newAppAuthMutation(c.config, OpUpdate)
	return &AppAuthUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppAuthClient) UpdateOne(aa *AppAuth) *AppAuthUpdateOne {
	mutation := newAppAuthMutation(c.config, OpUpdateOne, withAppAuth(aa))
	return &AppAuthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppAuthClient) UpdateOneID(id uuid.UUID) *AppAuthUpdateOne {
	mutation := newAppAuthMutation(c.config, OpUpdateOne, withAppAuthID(id))
	return &AppAuthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppAuth.
func (c *AppAuthClient) Delete() *AppAuthDelete {
	mutation := newAppAuthMutation(c.config, OpDelete)
	return &AppAuthDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AppAuthClient) DeleteOne(aa *AppAuth) *AppAuthDeleteOne {
	return c.DeleteOneID(aa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AppAuthClient) DeleteOneID(id uuid.UUID) *AppAuthDeleteOne {
	builder := c.Delete().Where(appauth.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppAuthDeleteOne{builder}
}

// Query returns a query builder for AppAuth.
func (c *AppAuthClient) Query() *AppAuthQuery {
	return &AppAuthQuery{
		config: c.config,
	}
}

// Get returns a AppAuth entity by its id.
func (c *AppAuthClient) Get(ctx context.Context, id uuid.UUID) (*AppAuth, error) {
	return c.Query().Where(appauth.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppAuthClient) GetX(ctx context.Context, id uuid.UUID) *AppAuth {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppAuthClient) Hooks() []Hook {
	return c.hooks.AppAuth
}

// AppRoleAuthClient is a client for the AppRoleAuth schema.
type AppRoleAuthClient struct {
	config
}

// NewAppRoleAuthClient returns a client for the AppRoleAuth from the given config.
func NewAppRoleAuthClient(c config) *AppRoleAuthClient {
	return &AppRoleAuthClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `approleauth.Hooks(f(g(h())))`.
func (c *AppRoleAuthClient) Use(hooks ...Hook) {
	c.hooks.AppRoleAuth = append(c.hooks.AppRoleAuth, hooks...)
}

// Create returns a create builder for AppRoleAuth.
func (c *AppRoleAuthClient) Create() *AppRoleAuthCreate {
	mutation := newAppRoleAuthMutation(c.config, OpCreate)
	return &AppRoleAuthCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppRoleAuth entities.
func (c *AppRoleAuthClient) CreateBulk(builders ...*AppRoleAuthCreate) *AppRoleAuthCreateBulk {
	return &AppRoleAuthCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppRoleAuth.
func (c *AppRoleAuthClient) Update() *AppRoleAuthUpdate {
	mutation := newAppRoleAuthMutation(c.config, OpUpdate)
	return &AppRoleAuthUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppRoleAuthClient) UpdateOne(ara *AppRoleAuth) *AppRoleAuthUpdateOne {
	mutation := newAppRoleAuthMutation(c.config, OpUpdateOne, withAppRoleAuth(ara))
	return &AppRoleAuthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppRoleAuthClient) UpdateOneID(id uuid.UUID) *AppRoleAuthUpdateOne {
	mutation := newAppRoleAuthMutation(c.config, OpUpdateOne, withAppRoleAuthID(id))
	return &AppRoleAuthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppRoleAuth.
func (c *AppRoleAuthClient) Delete() *AppRoleAuthDelete {
	mutation := newAppRoleAuthMutation(c.config, OpDelete)
	return &AppRoleAuthDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AppRoleAuthClient) DeleteOne(ara *AppRoleAuth) *AppRoleAuthDeleteOne {
	return c.DeleteOneID(ara.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AppRoleAuthClient) DeleteOneID(id uuid.UUID) *AppRoleAuthDeleteOne {
	builder := c.Delete().Where(approleauth.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppRoleAuthDeleteOne{builder}
}

// Query returns a query builder for AppRoleAuth.
func (c *AppRoleAuthClient) Query() *AppRoleAuthQuery {
	return &AppRoleAuthQuery{
		config: c.config,
	}
}

// Get returns a AppRoleAuth entity by its id.
func (c *AppRoleAuthClient) Get(ctx context.Context, id uuid.UUID) (*AppRoleAuth, error) {
	return c.Query().Where(approleauth.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppRoleAuthClient) GetX(ctx context.Context, id uuid.UUID) *AppRoleAuth {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppRoleAuthClient) Hooks() []Hook {
	return c.hooks.AppRoleAuth
}

// AppUserAuthClient is a client for the AppUserAuth schema.
type AppUserAuthClient struct {
	config
}

// NewAppUserAuthClient returns a client for the AppUserAuth from the given config.
func NewAppUserAuthClient(c config) *AppUserAuthClient {
	return &AppUserAuthClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appuserauth.Hooks(f(g(h())))`.
func (c *AppUserAuthClient) Use(hooks ...Hook) {
	c.hooks.AppUserAuth = append(c.hooks.AppUserAuth, hooks...)
}

// Create returns a create builder for AppUserAuth.
func (c *AppUserAuthClient) Create() *AppUserAuthCreate {
	mutation := newAppUserAuthMutation(c.config, OpCreate)
	return &AppUserAuthCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppUserAuth entities.
func (c *AppUserAuthClient) CreateBulk(builders ...*AppUserAuthCreate) *AppUserAuthCreateBulk {
	return &AppUserAuthCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppUserAuth.
func (c *AppUserAuthClient) Update() *AppUserAuthUpdate {
	mutation := newAppUserAuthMutation(c.config, OpUpdate)
	return &AppUserAuthUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppUserAuthClient) UpdateOne(aua *AppUserAuth) *AppUserAuthUpdateOne {
	mutation := newAppUserAuthMutation(c.config, OpUpdateOne, withAppUserAuth(aua))
	return &AppUserAuthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppUserAuthClient) UpdateOneID(id uuid.UUID) *AppUserAuthUpdateOne {
	mutation := newAppUserAuthMutation(c.config, OpUpdateOne, withAppUserAuthID(id))
	return &AppUserAuthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppUserAuth.
func (c *AppUserAuthClient) Delete() *AppUserAuthDelete {
	mutation := newAppUserAuthMutation(c.config, OpDelete)
	return &AppUserAuthDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AppUserAuthClient) DeleteOne(aua *AppUserAuth) *AppUserAuthDeleteOne {
	return c.DeleteOneID(aua.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AppUserAuthClient) DeleteOneID(id uuid.UUID) *AppUserAuthDeleteOne {
	builder := c.Delete().Where(appuserauth.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppUserAuthDeleteOne{builder}
}

// Query returns a query builder for AppUserAuth.
func (c *AppUserAuthClient) Query() *AppUserAuthQuery {
	return &AppUserAuthQuery{
		config: c.config,
	}
}

// Get returns a AppUserAuth entity by its id.
func (c *AppUserAuthClient) Get(ctx context.Context, id uuid.UUID) (*AppUserAuth, error) {
	return c.Query().Where(appuserauth.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppUserAuthClient) GetX(ctx context.Context, id uuid.UUID) *AppUserAuth {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppUserAuthClient) Hooks() []Hook {
	return c.hooks.AppUserAuth
}

// AuthHistoryClient is a client for the AuthHistory schema.
type AuthHistoryClient struct {
	config
}

// NewAuthHistoryClient returns a client for the AuthHistory from the given config.
func NewAuthHistoryClient(c config) *AuthHistoryClient {
	return &AuthHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `authhistory.Hooks(f(g(h())))`.
func (c *AuthHistoryClient) Use(hooks ...Hook) {
	c.hooks.AuthHistory = append(c.hooks.AuthHistory, hooks...)
}

// Create returns a create builder for AuthHistory.
func (c *AuthHistoryClient) Create() *AuthHistoryCreate {
	mutation := newAuthHistoryMutation(c.config, OpCreate)
	return &AuthHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AuthHistory entities.
func (c *AuthHistoryClient) CreateBulk(builders ...*AuthHistoryCreate) *AuthHistoryCreateBulk {
	return &AuthHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AuthHistory.
func (c *AuthHistoryClient) Update() *AuthHistoryUpdate {
	mutation := newAuthHistoryMutation(c.config, OpUpdate)
	return &AuthHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuthHistoryClient) UpdateOne(ah *AuthHistory) *AuthHistoryUpdateOne {
	mutation := newAuthHistoryMutation(c.config, OpUpdateOne, withAuthHistory(ah))
	return &AuthHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuthHistoryClient) UpdateOneID(id uuid.UUID) *AuthHistoryUpdateOne {
	mutation := newAuthHistoryMutation(c.config, OpUpdateOne, withAuthHistoryID(id))
	return &AuthHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AuthHistory.
func (c *AuthHistoryClient) Delete() *AuthHistoryDelete {
	mutation := newAuthHistoryMutation(c.config, OpDelete)
	return &AuthHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AuthHistoryClient) DeleteOne(ah *AuthHistory) *AuthHistoryDeleteOne {
	return c.DeleteOneID(ah.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AuthHistoryClient) DeleteOneID(id uuid.UUID) *AuthHistoryDeleteOne {
	builder := c.Delete().Where(authhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuthHistoryDeleteOne{builder}
}

// Query returns a query builder for AuthHistory.
func (c *AuthHistoryClient) Query() *AuthHistoryQuery {
	return &AuthHistoryQuery{
		config: c.config,
	}
}

// Get returns a AuthHistory entity by its id.
func (c *AuthHistoryClient) Get(ctx context.Context, id uuid.UUID) (*AuthHistory, error) {
	return c.Query().Where(authhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuthHistoryClient) GetX(ctx context.Context, id uuid.UUID) *AuthHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AuthHistoryClient) Hooks() []Hook {
	return c.hooks.AuthHistory
}

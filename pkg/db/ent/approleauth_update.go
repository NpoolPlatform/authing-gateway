// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/authing-gateway/pkg/db/ent/approleauth"
	"github.com/NpoolPlatform/authing-gateway/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// AppRoleAuthUpdate is the builder for updating AppRoleAuth entities.
type AppRoleAuthUpdate struct {
	config
	hooks    []Hook
	mutation *AppRoleAuthMutation
}

// Where appends a list predicates to the AppRoleAuthUpdate builder.
func (arau *AppRoleAuthUpdate) Where(ps ...predicate.AppRoleAuth) *AppRoleAuthUpdate {
	arau.mutation.Where(ps...)
	return arau
}

// SetAppID sets the "app_id" field.
func (arau *AppRoleAuthUpdate) SetAppID(u uuid.UUID) *AppRoleAuthUpdate {
	arau.mutation.SetAppID(u)
	return arau
}

// SetRoleID sets the "role_id" field.
func (arau *AppRoleAuthUpdate) SetRoleID(u uuid.UUID) *AppRoleAuthUpdate {
	arau.mutation.SetRoleID(u)
	return arau
}

// SetResource sets the "resource" field.
func (arau *AppRoleAuthUpdate) SetResource(s string) *AppRoleAuthUpdate {
	arau.mutation.SetResource(s)
	return arau
}

// SetMethod sets the "method" field.
func (arau *AppRoleAuthUpdate) SetMethod(s string) *AppRoleAuthUpdate {
	arau.mutation.SetMethod(s)
	return arau
}

// SetCreateAt sets the "create_at" field.
func (arau *AppRoleAuthUpdate) SetCreateAt(u uint32) *AppRoleAuthUpdate {
	arau.mutation.ResetCreateAt()
	arau.mutation.SetCreateAt(u)
	return arau
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (arau *AppRoleAuthUpdate) SetNillableCreateAt(u *uint32) *AppRoleAuthUpdate {
	if u != nil {
		arau.SetCreateAt(*u)
	}
	return arau
}

// AddCreateAt adds u to the "create_at" field.
func (arau *AppRoleAuthUpdate) AddCreateAt(u int32) *AppRoleAuthUpdate {
	arau.mutation.AddCreateAt(u)
	return arau
}

// SetUpdateAt sets the "update_at" field.
func (arau *AppRoleAuthUpdate) SetUpdateAt(u uint32) *AppRoleAuthUpdate {
	arau.mutation.ResetUpdateAt()
	arau.mutation.SetUpdateAt(u)
	return arau
}

// AddUpdateAt adds u to the "update_at" field.
func (arau *AppRoleAuthUpdate) AddUpdateAt(u int32) *AppRoleAuthUpdate {
	arau.mutation.AddUpdateAt(u)
	return arau
}

// SetDeleteAt sets the "delete_at" field.
func (arau *AppRoleAuthUpdate) SetDeleteAt(u uint32) *AppRoleAuthUpdate {
	arau.mutation.ResetDeleteAt()
	arau.mutation.SetDeleteAt(u)
	return arau
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (arau *AppRoleAuthUpdate) SetNillableDeleteAt(u *uint32) *AppRoleAuthUpdate {
	if u != nil {
		arau.SetDeleteAt(*u)
	}
	return arau
}

// AddDeleteAt adds u to the "delete_at" field.
func (arau *AppRoleAuthUpdate) AddDeleteAt(u int32) *AppRoleAuthUpdate {
	arau.mutation.AddDeleteAt(u)
	return arau
}

// Mutation returns the AppRoleAuthMutation object of the builder.
func (arau *AppRoleAuthUpdate) Mutation() *AppRoleAuthMutation {
	return arau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (arau *AppRoleAuthUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	arau.defaults()
	if len(arau.hooks) == 0 {
		affected, err = arau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppRoleAuthMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			arau.mutation = mutation
			affected, err = arau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(arau.hooks) - 1; i >= 0; i-- {
			if arau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = arau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, arau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (arau *AppRoleAuthUpdate) SaveX(ctx context.Context) int {
	affected, err := arau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (arau *AppRoleAuthUpdate) Exec(ctx context.Context) error {
	_, err := arau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arau *AppRoleAuthUpdate) ExecX(ctx context.Context) {
	if err := arau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (arau *AppRoleAuthUpdate) defaults() {
	if _, ok := arau.mutation.UpdateAt(); !ok {
		v := approleauth.UpdateDefaultUpdateAt()
		arau.mutation.SetUpdateAt(v)
	}
}

func (arau *AppRoleAuthUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   approleauth.Table,
			Columns: approleauth.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: approleauth.FieldID,
			},
		},
	}
	if ps := arau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := arau.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: approleauth.FieldAppID,
		})
	}
	if value, ok := arau.mutation.RoleID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: approleauth.FieldRoleID,
		})
	}
	if value, ok := arau.mutation.Resource(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: approleauth.FieldResource,
		})
	}
	if value, ok := arau.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: approleauth.FieldMethod,
		})
	}
	if value, ok := arau.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleauth.FieldCreateAt,
		})
	}
	if value, ok := arau.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleauth.FieldCreateAt,
		})
	}
	if value, ok := arau.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleauth.FieldUpdateAt,
		})
	}
	if value, ok := arau.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleauth.FieldUpdateAt,
		})
	}
	if value, ok := arau.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleauth.FieldDeleteAt,
		})
	}
	if value, ok := arau.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleauth.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, arau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{approleauth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AppRoleAuthUpdateOne is the builder for updating a single AppRoleAuth entity.
type AppRoleAuthUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppRoleAuthMutation
}

// SetAppID sets the "app_id" field.
func (arauo *AppRoleAuthUpdateOne) SetAppID(u uuid.UUID) *AppRoleAuthUpdateOne {
	arauo.mutation.SetAppID(u)
	return arauo
}

// SetRoleID sets the "role_id" field.
func (arauo *AppRoleAuthUpdateOne) SetRoleID(u uuid.UUID) *AppRoleAuthUpdateOne {
	arauo.mutation.SetRoleID(u)
	return arauo
}

// SetResource sets the "resource" field.
func (arauo *AppRoleAuthUpdateOne) SetResource(s string) *AppRoleAuthUpdateOne {
	arauo.mutation.SetResource(s)
	return arauo
}

// SetMethod sets the "method" field.
func (arauo *AppRoleAuthUpdateOne) SetMethod(s string) *AppRoleAuthUpdateOne {
	arauo.mutation.SetMethod(s)
	return arauo
}

// SetCreateAt sets the "create_at" field.
func (arauo *AppRoleAuthUpdateOne) SetCreateAt(u uint32) *AppRoleAuthUpdateOne {
	arauo.mutation.ResetCreateAt()
	arauo.mutation.SetCreateAt(u)
	return arauo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (arauo *AppRoleAuthUpdateOne) SetNillableCreateAt(u *uint32) *AppRoleAuthUpdateOne {
	if u != nil {
		arauo.SetCreateAt(*u)
	}
	return arauo
}

// AddCreateAt adds u to the "create_at" field.
func (arauo *AppRoleAuthUpdateOne) AddCreateAt(u int32) *AppRoleAuthUpdateOne {
	arauo.mutation.AddCreateAt(u)
	return arauo
}

// SetUpdateAt sets the "update_at" field.
func (arauo *AppRoleAuthUpdateOne) SetUpdateAt(u uint32) *AppRoleAuthUpdateOne {
	arauo.mutation.ResetUpdateAt()
	arauo.mutation.SetUpdateAt(u)
	return arauo
}

// AddUpdateAt adds u to the "update_at" field.
func (arauo *AppRoleAuthUpdateOne) AddUpdateAt(u int32) *AppRoleAuthUpdateOne {
	arauo.mutation.AddUpdateAt(u)
	return arauo
}

// SetDeleteAt sets the "delete_at" field.
func (arauo *AppRoleAuthUpdateOne) SetDeleteAt(u uint32) *AppRoleAuthUpdateOne {
	arauo.mutation.ResetDeleteAt()
	arauo.mutation.SetDeleteAt(u)
	return arauo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (arauo *AppRoleAuthUpdateOne) SetNillableDeleteAt(u *uint32) *AppRoleAuthUpdateOne {
	if u != nil {
		arauo.SetDeleteAt(*u)
	}
	return arauo
}

// AddDeleteAt adds u to the "delete_at" field.
func (arauo *AppRoleAuthUpdateOne) AddDeleteAt(u int32) *AppRoleAuthUpdateOne {
	arauo.mutation.AddDeleteAt(u)
	return arauo
}

// Mutation returns the AppRoleAuthMutation object of the builder.
func (arauo *AppRoleAuthUpdateOne) Mutation() *AppRoleAuthMutation {
	return arauo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (arauo *AppRoleAuthUpdateOne) Select(field string, fields ...string) *AppRoleAuthUpdateOne {
	arauo.fields = append([]string{field}, fields...)
	return arauo
}

// Save executes the query and returns the updated AppRoleAuth entity.
func (arauo *AppRoleAuthUpdateOne) Save(ctx context.Context) (*AppRoleAuth, error) {
	var (
		err  error
		node *AppRoleAuth
	)
	arauo.defaults()
	if len(arauo.hooks) == 0 {
		node, err = arauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppRoleAuthMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			arauo.mutation = mutation
			node, err = arauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(arauo.hooks) - 1; i >= 0; i-- {
			if arauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = arauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, arauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (arauo *AppRoleAuthUpdateOne) SaveX(ctx context.Context) *AppRoleAuth {
	node, err := arauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (arauo *AppRoleAuthUpdateOne) Exec(ctx context.Context) error {
	_, err := arauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arauo *AppRoleAuthUpdateOne) ExecX(ctx context.Context) {
	if err := arauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (arauo *AppRoleAuthUpdateOne) defaults() {
	if _, ok := arauo.mutation.UpdateAt(); !ok {
		v := approleauth.UpdateDefaultUpdateAt()
		arauo.mutation.SetUpdateAt(v)
	}
}

func (arauo *AppRoleAuthUpdateOne) sqlSave(ctx context.Context) (_node *AppRoleAuth, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   approleauth.Table,
			Columns: approleauth.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: approleauth.FieldID,
			},
		},
	}
	id, ok := arauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppRoleAuth.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := arauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, approleauth.FieldID)
		for _, f := range fields {
			if !approleauth.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != approleauth.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := arauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := arauo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: approleauth.FieldAppID,
		})
	}
	if value, ok := arauo.mutation.RoleID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: approleauth.FieldRoleID,
		})
	}
	if value, ok := arauo.mutation.Resource(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: approleauth.FieldResource,
		})
	}
	if value, ok := arauo.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: approleauth.FieldMethod,
		})
	}
	if value, ok := arauo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleauth.FieldCreateAt,
		})
	}
	if value, ok := arauo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleauth.FieldCreateAt,
		})
	}
	if value, ok := arauo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleauth.FieldUpdateAt,
		})
	}
	if value, ok := arauo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleauth.FieldUpdateAt,
		})
	}
	if value, ok := arauo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleauth.FieldDeleteAt,
		})
	}
	if value, ok := arauo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleauth.FieldDeleteAt,
		})
	}
	_node = &AppRoleAuth{config: arauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, arauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{approleauth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}

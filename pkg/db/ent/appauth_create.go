// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/authing-gateway/pkg/db/ent/appauth"
	"github.com/google/uuid"
)

// AppAuthCreate is the builder for creating a AppAuth entity.
type AppAuthCreate struct {
	config
	mutation *AppAuthMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAppID sets the "app_id" field.
func (aac *AppAuthCreate) SetAppID(u uuid.UUID) *AppAuthCreate {
	aac.mutation.SetAppID(u)
	return aac
}

// SetResource sets the "resource" field.
func (aac *AppAuthCreate) SetResource(s string) *AppAuthCreate {
	aac.mutation.SetResource(s)
	return aac
}

// SetMethod sets the "method" field.
func (aac *AppAuthCreate) SetMethod(s string) *AppAuthCreate {
	aac.mutation.SetMethod(s)
	return aac
}

// SetCreateAt sets the "create_at" field.
func (aac *AppAuthCreate) SetCreateAt(u uint32) *AppAuthCreate {
	aac.mutation.SetCreateAt(u)
	return aac
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (aac *AppAuthCreate) SetNillableCreateAt(u *uint32) *AppAuthCreate {
	if u != nil {
		aac.SetCreateAt(*u)
	}
	return aac
}

// SetUpdateAt sets the "update_at" field.
func (aac *AppAuthCreate) SetUpdateAt(u uint32) *AppAuthCreate {
	aac.mutation.SetUpdateAt(u)
	return aac
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (aac *AppAuthCreate) SetNillableUpdateAt(u *uint32) *AppAuthCreate {
	if u != nil {
		aac.SetUpdateAt(*u)
	}
	return aac
}

// SetDeleteAt sets the "delete_at" field.
func (aac *AppAuthCreate) SetDeleteAt(u uint32) *AppAuthCreate {
	aac.mutation.SetDeleteAt(u)
	return aac
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (aac *AppAuthCreate) SetNillableDeleteAt(u *uint32) *AppAuthCreate {
	if u != nil {
		aac.SetDeleteAt(*u)
	}
	return aac
}

// SetID sets the "id" field.
func (aac *AppAuthCreate) SetID(u uuid.UUID) *AppAuthCreate {
	aac.mutation.SetID(u)
	return aac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (aac *AppAuthCreate) SetNillableID(u *uuid.UUID) *AppAuthCreate {
	if u != nil {
		aac.SetID(*u)
	}
	return aac
}

// Mutation returns the AppAuthMutation object of the builder.
func (aac *AppAuthCreate) Mutation() *AppAuthMutation {
	return aac.mutation
}

// Save creates the AppAuth in the database.
func (aac *AppAuthCreate) Save(ctx context.Context) (*AppAuth, error) {
	var (
		err  error
		node *AppAuth
	)
	aac.defaults()
	if len(aac.hooks) == 0 {
		if err = aac.check(); err != nil {
			return nil, err
		}
		node, err = aac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppAuthMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aac.check(); err != nil {
				return nil, err
			}
			aac.mutation = mutation
			if node, err = aac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(aac.hooks) - 1; i >= 0; i-- {
			if aac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (aac *AppAuthCreate) SaveX(ctx context.Context) *AppAuth {
	v, err := aac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aac *AppAuthCreate) Exec(ctx context.Context) error {
	_, err := aac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aac *AppAuthCreate) ExecX(ctx context.Context) {
	if err := aac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aac *AppAuthCreate) defaults() {
	if _, ok := aac.mutation.CreateAt(); !ok {
		v := appauth.DefaultCreateAt()
		aac.mutation.SetCreateAt(v)
	}
	if _, ok := aac.mutation.UpdateAt(); !ok {
		v := appauth.DefaultUpdateAt()
		aac.mutation.SetUpdateAt(v)
	}
	if _, ok := aac.mutation.DeleteAt(); !ok {
		v := appauth.DefaultDeleteAt()
		aac.mutation.SetDeleteAt(v)
	}
	if _, ok := aac.mutation.ID(); !ok {
		v := appauth.DefaultID()
		aac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aac *AppAuthCreate) check() error {
	if _, ok := aac.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "AppAuth.app_id"`)}
	}
	if _, ok := aac.mutation.Resource(); !ok {
		return &ValidationError{Name: "resource", err: errors.New(`ent: missing required field "AppAuth.resource"`)}
	}
	if _, ok := aac.mutation.Method(); !ok {
		return &ValidationError{Name: "method", err: errors.New(`ent: missing required field "AppAuth.method"`)}
	}
	if _, ok := aac.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "AppAuth.create_at"`)}
	}
	if _, ok := aac.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "AppAuth.update_at"`)}
	}
	if _, ok := aac.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "AppAuth.delete_at"`)}
	}
	return nil
}

func (aac *AppAuthCreate) sqlSave(ctx context.Context) (*AppAuth, error) {
	_node, _spec := aac.createSpec()
	if err := sqlgraph.CreateNode(ctx, aac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (aac *AppAuthCreate) createSpec() (*AppAuth, *sqlgraph.CreateSpec) {
	var (
		_node = &AppAuth{config: aac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: appauth.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appauth.FieldID,
			},
		}
	)
	_spec.OnConflict = aac.conflict
	if id, ok := aac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := aac.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appauth.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := aac.mutation.Resource(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appauth.FieldResource,
		})
		_node.Resource = value
	}
	if value, ok := aac.mutation.Method(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appauth.FieldMethod,
		})
		_node.Method = value
	}
	if value, ok := aac.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appauth.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := aac.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appauth.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := aac.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appauth.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppAuth.Create().
//		SetAppID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppAuthUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (aac *AppAuthCreate) OnConflict(opts ...sql.ConflictOption) *AppAuthUpsertOne {
	aac.conflict = opts
	return &AppAuthUpsertOne{
		create: aac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppAuth.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (aac *AppAuthCreate) OnConflictColumns(columns ...string) *AppAuthUpsertOne {
	aac.conflict = append(aac.conflict, sql.ConflictColumns(columns...))
	return &AppAuthUpsertOne{
		create: aac,
	}
}

type (
	// AppAuthUpsertOne is the builder for "upsert"-ing
	//  one AppAuth node.
	AppAuthUpsertOne struct {
		create *AppAuthCreate
	}

	// AppAuthUpsert is the "OnConflict" setter.
	AppAuthUpsert struct {
		*sql.UpdateSet
	}
)

// SetAppID sets the "app_id" field.
func (u *AppAuthUpsert) SetAppID(v uuid.UUID) *AppAuthUpsert {
	u.Set(appauth.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppAuthUpsert) UpdateAppID() *AppAuthUpsert {
	u.SetExcluded(appauth.FieldAppID)
	return u
}

// SetResource sets the "resource" field.
func (u *AppAuthUpsert) SetResource(v string) *AppAuthUpsert {
	u.Set(appauth.FieldResource, v)
	return u
}

// UpdateResource sets the "resource" field to the value that was provided on create.
func (u *AppAuthUpsert) UpdateResource() *AppAuthUpsert {
	u.SetExcluded(appauth.FieldResource)
	return u
}

// SetMethod sets the "method" field.
func (u *AppAuthUpsert) SetMethod(v string) *AppAuthUpsert {
	u.Set(appauth.FieldMethod, v)
	return u
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *AppAuthUpsert) UpdateMethod() *AppAuthUpsert {
	u.SetExcluded(appauth.FieldMethod)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *AppAuthUpsert) SetCreateAt(v uint32) *AppAuthUpsert {
	u.Set(appauth.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppAuthUpsert) UpdateCreateAt() *AppAuthUpsert {
	u.SetExcluded(appauth.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppAuthUpsert) AddCreateAt(v uint32) *AppAuthUpsert {
	u.Add(appauth.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *AppAuthUpsert) SetUpdateAt(v uint32) *AppAuthUpsert {
	u.Set(appauth.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppAuthUpsert) UpdateUpdateAt() *AppAuthUpsert {
	u.SetExcluded(appauth.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppAuthUpsert) AddUpdateAt(v uint32) *AppAuthUpsert {
	u.Add(appauth.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppAuthUpsert) SetDeleteAt(v uint32) *AppAuthUpsert {
	u.Set(appauth.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppAuthUpsert) UpdateDeleteAt() *AppAuthUpsert {
	u.SetExcluded(appauth.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppAuthUpsert) AddDeleteAt(v uint32) *AppAuthUpsert {
	u.Add(appauth.FieldDeleteAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppAuth.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appauth.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppAuthUpsertOne) UpdateNewValues() *AppAuthUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appauth.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.AppAuth.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AppAuthUpsertOne) Ignore() *AppAuthUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppAuthUpsertOne) DoNothing() *AppAuthUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppAuthCreate.OnConflict
// documentation for more info.
func (u *AppAuthUpsertOne) Update(set func(*AppAuthUpsert)) *AppAuthUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppAuthUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppAuthUpsertOne) SetAppID(v uuid.UUID) *AppAuthUpsertOne {
	return u.Update(func(s *AppAuthUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppAuthUpsertOne) UpdateAppID() *AppAuthUpsertOne {
	return u.Update(func(s *AppAuthUpsert) {
		s.UpdateAppID()
	})
}

// SetResource sets the "resource" field.
func (u *AppAuthUpsertOne) SetResource(v string) *AppAuthUpsertOne {
	return u.Update(func(s *AppAuthUpsert) {
		s.SetResource(v)
	})
}

// UpdateResource sets the "resource" field to the value that was provided on create.
func (u *AppAuthUpsertOne) UpdateResource() *AppAuthUpsertOne {
	return u.Update(func(s *AppAuthUpsert) {
		s.UpdateResource()
	})
}

// SetMethod sets the "method" field.
func (u *AppAuthUpsertOne) SetMethod(v string) *AppAuthUpsertOne {
	return u.Update(func(s *AppAuthUpsert) {
		s.SetMethod(v)
	})
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *AppAuthUpsertOne) UpdateMethod() *AppAuthUpsertOne {
	return u.Update(func(s *AppAuthUpsert) {
		s.UpdateMethod()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppAuthUpsertOne) SetCreateAt(v uint32) *AppAuthUpsertOne {
	return u.Update(func(s *AppAuthUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppAuthUpsertOne) AddCreateAt(v uint32) *AppAuthUpsertOne {
	return u.Update(func(s *AppAuthUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppAuthUpsertOne) UpdateCreateAt() *AppAuthUpsertOne {
	return u.Update(func(s *AppAuthUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppAuthUpsertOne) SetUpdateAt(v uint32) *AppAuthUpsertOne {
	return u.Update(func(s *AppAuthUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppAuthUpsertOne) AddUpdateAt(v uint32) *AppAuthUpsertOne {
	return u.Update(func(s *AppAuthUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppAuthUpsertOne) UpdateUpdateAt() *AppAuthUpsertOne {
	return u.Update(func(s *AppAuthUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppAuthUpsertOne) SetDeleteAt(v uint32) *AppAuthUpsertOne {
	return u.Update(func(s *AppAuthUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppAuthUpsertOne) AddDeleteAt(v uint32) *AppAuthUpsertOne {
	return u.Update(func(s *AppAuthUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppAuthUpsertOne) UpdateDeleteAt() *AppAuthUpsertOne {
	return u.Update(func(s *AppAuthUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *AppAuthUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppAuthCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppAuthUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppAuthUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AppAuthUpsertOne.ID is not supported by MySQL driver. Use AppAuthUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppAuthUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppAuthCreateBulk is the builder for creating many AppAuth entities in bulk.
type AppAuthCreateBulk struct {
	config
	builders []*AppAuthCreate
	conflict []sql.ConflictOption
}

// Save creates the AppAuth entities in the database.
func (aacb *AppAuthCreateBulk) Save(ctx context.Context) ([]*AppAuth, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aacb.builders))
	nodes := make([]*AppAuth, len(aacb.builders))
	mutators := make([]Mutator, len(aacb.builders))
	for i := range aacb.builders {
		func(i int, root context.Context) {
			builder := aacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppAuthMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = aacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aacb *AppAuthCreateBulk) SaveX(ctx context.Context) []*AppAuth {
	v, err := aacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aacb *AppAuthCreateBulk) Exec(ctx context.Context) error {
	_, err := aacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aacb *AppAuthCreateBulk) ExecX(ctx context.Context) {
	if err := aacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppAuth.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppAuthUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (aacb *AppAuthCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppAuthUpsertBulk {
	aacb.conflict = opts
	return &AppAuthUpsertBulk{
		create: aacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppAuth.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (aacb *AppAuthCreateBulk) OnConflictColumns(columns ...string) *AppAuthUpsertBulk {
	aacb.conflict = append(aacb.conflict, sql.ConflictColumns(columns...))
	return &AppAuthUpsertBulk{
		create: aacb,
	}
}

// AppAuthUpsertBulk is the builder for "upsert"-ing
// a bulk of AppAuth nodes.
type AppAuthUpsertBulk struct {
	create *AppAuthCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppAuth.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appauth.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppAuthUpsertBulk) UpdateNewValues() *AppAuthUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appauth.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppAuth.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AppAuthUpsertBulk) Ignore() *AppAuthUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppAuthUpsertBulk) DoNothing() *AppAuthUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppAuthCreateBulk.OnConflict
// documentation for more info.
func (u *AppAuthUpsertBulk) Update(set func(*AppAuthUpsert)) *AppAuthUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppAuthUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppAuthUpsertBulk) SetAppID(v uuid.UUID) *AppAuthUpsertBulk {
	return u.Update(func(s *AppAuthUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppAuthUpsertBulk) UpdateAppID() *AppAuthUpsertBulk {
	return u.Update(func(s *AppAuthUpsert) {
		s.UpdateAppID()
	})
}

// SetResource sets the "resource" field.
func (u *AppAuthUpsertBulk) SetResource(v string) *AppAuthUpsertBulk {
	return u.Update(func(s *AppAuthUpsert) {
		s.SetResource(v)
	})
}

// UpdateResource sets the "resource" field to the value that was provided on create.
func (u *AppAuthUpsertBulk) UpdateResource() *AppAuthUpsertBulk {
	return u.Update(func(s *AppAuthUpsert) {
		s.UpdateResource()
	})
}

// SetMethod sets the "method" field.
func (u *AppAuthUpsertBulk) SetMethod(v string) *AppAuthUpsertBulk {
	return u.Update(func(s *AppAuthUpsert) {
		s.SetMethod(v)
	})
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *AppAuthUpsertBulk) UpdateMethod() *AppAuthUpsertBulk {
	return u.Update(func(s *AppAuthUpsert) {
		s.UpdateMethod()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppAuthUpsertBulk) SetCreateAt(v uint32) *AppAuthUpsertBulk {
	return u.Update(func(s *AppAuthUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppAuthUpsertBulk) AddCreateAt(v uint32) *AppAuthUpsertBulk {
	return u.Update(func(s *AppAuthUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppAuthUpsertBulk) UpdateCreateAt() *AppAuthUpsertBulk {
	return u.Update(func(s *AppAuthUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppAuthUpsertBulk) SetUpdateAt(v uint32) *AppAuthUpsertBulk {
	return u.Update(func(s *AppAuthUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppAuthUpsertBulk) AddUpdateAt(v uint32) *AppAuthUpsertBulk {
	return u.Update(func(s *AppAuthUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppAuthUpsertBulk) UpdateUpdateAt() *AppAuthUpsertBulk {
	return u.Update(func(s *AppAuthUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppAuthUpsertBulk) SetDeleteAt(v uint32) *AppAuthUpsertBulk {
	return u.Update(func(s *AppAuthUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppAuthUpsertBulk) AddDeleteAt(v uint32) *AppAuthUpsertBulk {
	return u.Update(func(s *AppAuthUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppAuthUpsertBulk) UpdateDeleteAt() *AppAuthUpsertBulk {
	return u.Update(func(s *AppAuthUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *AppAuthUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppAuthCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppAuthCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppAuthUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

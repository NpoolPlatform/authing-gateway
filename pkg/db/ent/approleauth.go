// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/authing-gateway/pkg/db/ent/approleauth"
	"github.com/google/uuid"
)

// AppRoleAuth is the model entity for the AppRoleAuth schema.
type AppRoleAuth struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// RoleID holds the value of the "role_id" field.
	RoleID uuid.UUID `json:"role_id,omitempty"`
	// Resource holds the value of the "resource" field.
	Resource string `json:"resource,omitempty"`
	// Method holds the value of the "method" field.
	Method string `json:"method,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppRoleAuth) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case approleauth.FieldCreateAt, approleauth.FieldUpdateAt, approleauth.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case approleauth.FieldResource, approleauth.FieldMethod:
			values[i] = new(sql.NullString)
		case approleauth.FieldID, approleauth.FieldAppID, approleauth.FieldRoleID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppRoleAuth", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppRoleAuth fields.
func (ara *AppRoleAuth) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case approleauth.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ara.ID = *value
			}
		case approleauth.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				ara.AppID = *value
			}
		case approleauth.FieldRoleID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value != nil {
				ara.RoleID = *value
			}
		case approleauth.FieldResource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource", values[i])
			} else if value.Valid {
				ara.Resource = value.String
			}
		case approleauth.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				ara.Method = value.String
			}
		case approleauth.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				ara.CreateAt = uint32(value.Int64)
			}
		case approleauth.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				ara.UpdateAt = uint32(value.Int64)
			}
		case approleauth.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				ara.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AppRoleAuth.
// Note that you need to call AppRoleAuth.Unwrap() before calling this method if this AppRoleAuth
// was returned from a transaction, and the transaction was committed or rolled back.
func (ara *AppRoleAuth) Update() *AppRoleAuthUpdateOne {
	return (&AppRoleAuthClient{config: ara.config}).UpdateOne(ara)
}

// Unwrap unwraps the AppRoleAuth entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ara *AppRoleAuth) Unwrap() *AppRoleAuth {
	tx, ok := ara.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppRoleAuth is not a transactional entity")
	}
	ara.config.driver = tx.drv
	return ara
}

// String implements the fmt.Stringer.
func (ara *AppRoleAuth) String() string {
	var builder strings.Builder
	builder.WriteString("AppRoleAuth(")
	builder.WriteString(fmt.Sprintf("id=%v", ara.ID))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", ara.AppID))
	builder.WriteString(", role_id=")
	builder.WriteString(fmt.Sprintf("%v", ara.RoleID))
	builder.WriteString(", resource=")
	builder.WriteString(ara.Resource)
	builder.WriteString(", method=")
	builder.WriteString(ara.Method)
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", ara.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", ara.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", ara.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// AppRoleAuths is a parsable slice of AppRoleAuth.
type AppRoleAuths []*AppRoleAuth

func (ara AppRoleAuths) config(cfg config) {
	for _i := range ara {
		ara[_i].config = cfg
	}
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/authing-gateway/pkg/db/ent/approleauth"
	"github.com/google/uuid"
)

// AppRoleAuthCreate is the builder for creating a AppRoleAuth entity.
type AppRoleAuthCreate struct {
	config
	mutation *AppRoleAuthMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAppID sets the "app_id" field.
func (arac *AppRoleAuthCreate) SetAppID(u uuid.UUID) *AppRoleAuthCreate {
	arac.mutation.SetAppID(u)
	return arac
}

// SetRoleID sets the "role_id" field.
func (arac *AppRoleAuthCreate) SetRoleID(u uuid.UUID) *AppRoleAuthCreate {
	arac.mutation.SetRoleID(u)
	return arac
}

// SetResource sets the "resource" field.
func (arac *AppRoleAuthCreate) SetResource(s string) *AppRoleAuthCreate {
	arac.mutation.SetResource(s)
	return arac
}

// SetMethod sets the "method" field.
func (arac *AppRoleAuthCreate) SetMethod(s string) *AppRoleAuthCreate {
	arac.mutation.SetMethod(s)
	return arac
}

// SetCreateAt sets the "create_at" field.
func (arac *AppRoleAuthCreate) SetCreateAt(u uint32) *AppRoleAuthCreate {
	arac.mutation.SetCreateAt(u)
	return arac
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (arac *AppRoleAuthCreate) SetNillableCreateAt(u *uint32) *AppRoleAuthCreate {
	if u != nil {
		arac.SetCreateAt(*u)
	}
	return arac
}

// SetUpdateAt sets the "update_at" field.
func (arac *AppRoleAuthCreate) SetUpdateAt(u uint32) *AppRoleAuthCreate {
	arac.mutation.SetUpdateAt(u)
	return arac
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (arac *AppRoleAuthCreate) SetNillableUpdateAt(u *uint32) *AppRoleAuthCreate {
	if u != nil {
		arac.SetUpdateAt(*u)
	}
	return arac
}

// SetDeleteAt sets the "delete_at" field.
func (arac *AppRoleAuthCreate) SetDeleteAt(u uint32) *AppRoleAuthCreate {
	arac.mutation.SetDeleteAt(u)
	return arac
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (arac *AppRoleAuthCreate) SetNillableDeleteAt(u *uint32) *AppRoleAuthCreate {
	if u != nil {
		arac.SetDeleteAt(*u)
	}
	return arac
}

// SetID sets the "id" field.
func (arac *AppRoleAuthCreate) SetID(u uuid.UUID) *AppRoleAuthCreate {
	arac.mutation.SetID(u)
	return arac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (arac *AppRoleAuthCreate) SetNillableID(u *uuid.UUID) *AppRoleAuthCreate {
	if u != nil {
		arac.SetID(*u)
	}
	return arac
}

// Mutation returns the AppRoleAuthMutation object of the builder.
func (arac *AppRoleAuthCreate) Mutation() *AppRoleAuthMutation {
	return arac.mutation
}

// Save creates the AppRoleAuth in the database.
func (arac *AppRoleAuthCreate) Save(ctx context.Context) (*AppRoleAuth, error) {
	var (
		err  error
		node *AppRoleAuth
	)
	arac.defaults()
	if len(arac.hooks) == 0 {
		if err = arac.check(); err != nil {
			return nil, err
		}
		node, err = arac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppRoleAuthMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = arac.check(); err != nil {
				return nil, err
			}
			arac.mutation = mutation
			if node, err = arac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(arac.hooks) - 1; i >= 0; i-- {
			if arac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = arac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, arac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (arac *AppRoleAuthCreate) SaveX(ctx context.Context) *AppRoleAuth {
	v, err := arac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arac *AppRoleAuthCreate) Exec(ctx context.Context) error {
	_, err := arac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arac *AppRoleAuthCreate) ExecX(ctx context.Context) {
	if err := arac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (arac *AppRoleAuthCreate) defaults() {
	if _, ok := arac.mutation.CreateAt(); !ok {
		v := approleauth.DefaultCreateAt()
		arac.mutation.SetCreateAt(v)
	}
	if _, ok := arac.mutation.UpdateAt(); !ok {
		v := approleauth.DefaultUpdateAt()
		arac.mutation.SetUpdateAt(v)
	}
	if _, ok := arac.mutation.DeleteAt(); !ok {
		v := approleauth.DefaultDeleteAt()
		arac.mutation.SetDeleteAt(v)
	}
	if _, ok := arac.mutation.ID(); !ok {
		v := approleauth.DefaultID()
		arac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (arac *AppRoleAuthCreate) check() error {
	if _, ok := arac.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "AppRoleAuth.app_id"`)}
	}
	if _, ok := arac.mutation.RoleID(); !ok {
		return &ValidationError{Name: "role_id", err: errors.New(`ent: missing required field "AppRoleAuth.role_id"`)}
	}
	if _, ok := arac.mutation.Resource(); !ok {
		return &ValidationError{Name: "resource", err: errors.New(`ent: missing required field "AppRoleAuth.resource"`)}
	}
	if _, ok := arac.mutation.Method(); !ok {
		return &ValidationError{Name: "method", err: errors.New(`ent: missing required field "AppRoleAuth.method"`)}
	}
	if _, ok := arac.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "AppRoleAuth.create_at"`)}
	}
	if _, ok := arac.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "AppRoleAuth.update_at"`)}
	}
	if _, ok := arac.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "AppRoleAuth.delete_at"`)}
	}
	return nil
}

func (arac *AppRoleAuthCreate) sqlSave(ctx context.Context) (*AppRoleAuth, error) {
	_node, _spec := arac.createSpec()
	if err := sqlgraph.CreateNode(ctx, arac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (arac *AppRoleAuthCreate) createSpec() (*AppRoleAuth, *sqlgraph.CreateSpec) {
	var (
		_node = &AppRoleAuth{config: arac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: approleauth.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: approleauth.FieldID,
			},
		}
	)
	_spec.OnConflict = arac.conflict
	if id, ok := arac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := arac.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: approleauth.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := arac.mutation.RoleID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: approleauth.FieldRoleID,
		})
		_node.RoleID = value
	}
	if value, ok := arac.mutation.Resource(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: approleauth.FieldResource,
		})
		_node.Resource = value
	}
	if value, ok := arac.mutation.Method(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: approleauth.FieldMethod,
		})
		_node.Method = value
	}
	if value, ok := arac.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleauth.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := arac.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleauth.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := arac.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleauth.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppRoleAuth.Create().
//		SetAppID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppRoleAuthUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (arac *AppRoleAuthCreate) OnConflict(opts ...sql.ConflictOption) *AppRoleAuthUpsertOne {
	arac.conflict = opts
	return &AppRoleAuthUpsertOne{
		create: arac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppRoleAuth.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (arac *AppRoleAuthCreate) OnConflictColumns(columns ...string) *AppRoleAuthUpsertOne {
	arac.conflict = append(arac.conflict, sql.ConflictColumns(columns...))
	return &AppRoleAuthUpsertOne{
		create: arac,
	}
}

type (
	// AppRoleAuthUpsertOne is the builder for "upsert"-ing
	//  one AppRoleAuth node.
	AppRoleAuthUpsertOne struct {
		create *AppRoleAuthCreate
	}

	// AppRoleAuthUpsert is the "OnConflict" setter.
	AppRoleAuthUpsert struct {
		*sql.UpdateSet
	}
)

// SetAppID sets the "app_id" field.
func (u *AppRoleAuthUpsert) SetAppID(v uuid.UUID) *AppRoleAuthUpsert {
	u.Set(approleauth.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppRoleAuthUpsert) UpdateAppID() *AppRoleAuthUpsert {
	u.SetExcluded(approleauth.FieldAppID)
	return u
}

// SetRoleID sets the "role_id" field.
func (u *AppRoleAuthUpsert) SetRoleID(v uuid.UUID) *AppRoleAuthUpsert {
	u.Set(approleauth.FieldRoleID, v)
	return u
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *AppRoleAuthUpsert) UpdateRoleID() *AppRoleAuthUpsert {
	u.SetExcluded(approleauth.FieldRoleID)
	return u
}

// SetResource sets the "resource" field.
func (u *AppRoleAuthUpsert) SetResource(v string) *AppRoleAuthUpsert {
	u.Set(approleauth.FieldResource, v)
	return u
}

// UpdateResource sets the "resource" field to the value that was provided on create.
func (u *AppRoleAuthUpsert) UpdateResource() *AppRoleAuthUpsert {
	u.SetExcluded(approleauth.FieldResource)
	return u
}

// SetMethod sets the "method" field.
func (u *AppRoleAuthUpsert) SetMethod(v string) *AppRoleAuthUpsert {
	u.Set(approleauth.FieldMethod, v)
	return u
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *AppRoleAuthUpsert) UpdateMethod() *AppRoleAuthUpsert {
	u.SetExcluded(approleauth.FieldMethod)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *AppRoleAuthUpsert) SetCreateAt(v uint32) *AppRoleAuthUpsert {
	u.Set(approleauth.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppRoleAuthUpsert) UpdateCreateAt() *AppRoleAuthUpsert {
	u.SetExcluded(approleauth.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppRoleAuthUpsert) AddCreateAt(v uint32) *AppRoleAuthUpsert {
	u.Add(approleauth.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *AppRoleAuthUpsert) SetUpdateAt(v uint32) *AppRoleAuthUpsert {
	u.Set(approleauth.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppRoleAuthUpsert) UpdateUpdateAt() *AppRoleAuthUpsert {
	u.SetExcluded(approleauth.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppRoleAuthUpsert) AddUpdateAt(v uint32) *AppRoleAuthUpsert {
	u.Add(approleauth.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppRoleAuthUpsert) SetDeleteAt(v uint32) *AppRoleAuthUpsert {
	u.Set(approleauth.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppRoleAuthUpsert) UpdateDeleteAt() *AppRoleAuthUpsert {
	u.SetExcluded(approleauth.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppRoleAuthUpsert) AddDeleteAt(v uint32) *AppRoleAuthUpsert {
	u.Add(approleauth.FieldDeleteAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppRoleAuth.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(approleauth.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppRoleAuthUpsertOne) UpdateNewValues() *AppRoleAuthUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(approleauth.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.AppRoleAuth.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AppRoleAuthUpsertOne) Ignore() *AppRoleAuthUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppRoleAuthUpsertOne) DoNothing() *AppRoleAuthUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppRoleAuthCreate.OnConflict
// documentation for more info.
func (u *AppRoleAuthUpsertOne) Update(set func(*AppRoleAuthUpsert)) *AppRoleAuthUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppRoleAuthUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppRoleAuthUpsertOne) SetAppID(v uuid.UUID) *AppRoleAuthUpsertOne {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppRoleAuthUpsertOne) UpdateAppID() *AppRoleAuthUpsertOne {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.UpdateAppID()
	})
}

// SetRoleID sets the "role_id" field.
func (u *AppRoleAuthUpsertOne) SetRoleID(v uuid.UUID) *AppRoleAuthUpsertOne {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.SetRoleID(v)
	})
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *AppRoleAuthUpsertOne) UpdateRoleID() *AppRoleAuthUpsertOne {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.UpdateRoleID()
	})
}

// SetResource sets the "resource" field.
func (u *AppRoleAuthUpsertOne) SetResource(v string) *AppRoleAuthUpsertOne {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.SetResource(v)
	})
}

// UpdateResource sets the "resource" field to the value that was provided on create.
func (u *AppRoleAuthUpsertOne) UpdateResource() *AppRoleAuthUpsertOne {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.UpdateResource()
	})
}

// SetMethod sets the "method" field.
func (u *AppRoleAuthUpsertOne) SetMethod(v string) *AppRoleAuthUpsertOne {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.SetMethod(v)
	})
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *AppRoleAuthUpsertOne) UpdateMethod() *AppRoleAuthUpsertOne {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.UpdateMethod()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppRoleAuthUpsertOne) SetCreateAt(v uint32) *AppRoleAuthUpsertOne {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppRoleAuthUpsertOne) AddCreateAt(v uint32) *AppRoleAuthUpsertOne {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppRoleAuthUpsertOne) UpdateCreateAt() *AppRoleAuthUpsertOne {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppRoleAuthUpsertOne) SetUpdateAt(v uint32) *AppRoleAuthUpsertOne {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppRoleAuthUpsertOne) AddUpdateAt(v uint32) *AppRoleAuthUpsertOne {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppRoleAuthUpsertOne) UpdateUpdateAt() *AppRoleAuthUpsertOne {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppRoleAuthUpsertOne) SetDeleteAt(v uint32) *AppRoleAuthUpsertOne {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppRoleAuthUpsertOne) AddDeleteAt(v uint32) *AppRoleAuthUpsertOne {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppRoleAuthUpsertOne) UpdateDeleteAt() *AppRoleAuthUpsertOne {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *AppRoleAuthUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppRoleAuthCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppRoleAuthUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppRoleAuthUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AppRoleAuthUpsertOne.ID is not supported by MySQL driver. Use AppRoleAuthUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppRoleAuthUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppRoleAuthCreateBulk is the builder for creating many AppRoleAuth entities in bulk.
type AppRoleAuthCreateBulk struct {
	config
	builders []*AppRoleAuthCreate
	conflict []sql.ConflictOption
}

// Save creates the AppRoleAuth entities in the database.
func (aracb *AppRoleAuthCreateBulk) Save(ctx context.Context) ([]*AppRoleAuth, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aracb.builders))
	nodes := make([]*AppRoleAuth, len(aracb.builders))
	mutators := make([]Mutator, len(aracb.builders))
	for i := range aracb.builders {
		func(i int, root context.Context) {
			builder := aracb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppRoleAuthMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aracb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = aracb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aracb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aracb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aracb *AppRoleAuthCreateBulk) SaveX(ctx context.Context) []*AppRoleAuth {
	v, err := aracb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aracb *AppRoleAuthCreateBulk) Exec(ctx context.Context) error {
	_, err := aracb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aracb *AppRoleAuthCreateBulk) ExecX(ctx context.Context) {
	if err := aracb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppRoleAuth.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppRoleAuthUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (aracb *AppRoleAuthCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppRoleAuthUpsertBulk {
	aracb.conflict = opts
	return &AppRoleAuthUpsertBulk{
		create: aracb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppRoleAuth.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (aracb *AppRoleAuthCreateBulk) OnConflictColumns(columns ...string) *AppRoleAuthUpsertBulk {
	aracb.conflict = append(aracb.conflict, sql.ConflictColumns(columns...))
	return &AppRoleAuthUpsertBulk{
		create: aracb,
	}
}

// AppRoleAuthUpsertBulk is the builder for "upsert"-ing
// a bulk of AppRoleAuth nodes.
type AppRoleAuthUpsertBulk struct {
	create *AppRoleAuthCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppRoleAuth.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(approleauth.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppRoleAuthUpsertBulk) UpdateNewValues() *AppRoleAuthUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(approleauth.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppRoleAuth.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AppRoleAuthUpsertBulk) Ignore() *AppRoleAuthUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppRoleAuthUpsertBulk) DoNothing() *AppRoleAuthUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppRoleAuthCreateBulk.OnConflict
// documentation for more info.
func (u *AppRoleAuthUpsertBulk) Update(set func(*AppRoleAuthUpsert)) *AppRoleAuthUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppRoleAuthUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppRoleAuthUpsertBulk) SetAppID(v uuid.UUID) *AppRoleAuthUpsertBulk {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppRoleAuthUpsertBulk) UpdateAppID() *AppRoleAuthUpsertBulk {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.UpdateAppID()
	})
}

// SetRoleID sets the "role_id" field.
func (u *AppRoleAuthUpsertBulk) SetRoleID(v uuid.UUID) *AppRoleAuthUpsertBulk {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.SetRoleID(v)
	})
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *AppRoleAuthUpsertBulk) UpdateRoleID() *AppRoleAuthUpsertBulk {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.UpdateRoleID()
	})
}

// SetResource sets the "resource" field.
func (u *AppRoleAuthUpsertBulk) SetResource(v string) *AppRoleAuthUpsertBulk {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.SetResource(v)
	})
}

// UpdateResource sets the "resource" field to the value that was provided on create.
func (u *AppRoleAuthUpsertBulk) UpdateResource() *AppRoleAuthUpsertBulk {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.UpdateResource()
	})
}

// SetMethod sets the "method" field.
func (u *AppRoleAuthUpsertBulk) SetMethod(v string) *AppRoleAuthUpsertBulk {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.SetMethod(v)
	})
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *AppRoleAuthUpsertBulk) UpdateMethod() *AppRoleAuthUpsertBulk {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.UpdateMethod()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppRoleAuthUpsertBulk) SetCreateAt(v uint32) *AppRoleAuthUpsertBulk {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppRoleAuthUpsertBulk) AddCreateAt(v uint32) *AppRoleAuthUpsertBulk {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppRoleAuthUpsertBulk) UpdateCreateAt() *AppRoleAuthUpsertBulk {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppRoleAuthUpsertBulk) SetUpdateAt(v uint32) *AppRoleAuthUpsertBulk {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppRoleAuthUpsertBulk) AddUpdateAt(v uint32) *AppRoleAuthUpsertBulk {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppRoleAuthUpsertBulk) UpdateUpdateAt() *AppRoleAuthUpsertBulk {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppRoleAuthUpsertBulk) SetDeleteAt(v uint32) *AppRoleAuthUpsertBulk {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppRoleAuthUpsertBulk) AddDeleteAt(v uint32) *AppRoleAuthUpsertBulk {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppRoleAuthUpsertBulk) UpdateDeleteAt() *AppRoleAuthUpsertBulk {
	return u.Update(func(s *AppRoleAuthUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *AppRoleAuthUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppRoleAuthCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppRoleAuthCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppRoleAuthUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
